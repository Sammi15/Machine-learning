from numba import njit
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.svm import SVC
from sklearn.ensemble import BaggingClassifier
from sklearn.preprocessing import LabelEncoder


@jit(target_backend='cuda')
def new_model(X_train, Y_train_Ethanol, X_test, Y_test_Ethanol):
    n_estimators = 10
    threshold = 0.5


    # Y_train_Ethanol = np.where(Y_train_Ethanol > threshold, 1, 0)
    # Y_test_Ethanol = np.where(Y_test_Ethanol > threshold, 1, 0)
    clf = BaggingClassifier(SVC(kernel='linear', probability=True, class_weight='balanced'),
                            max_samples=1.0 / n_estimators, n_estimators=n_estimators, n_jobs=-1)
    clf.fit(X_train, Y_train_Ethanol)
    y_predict_Ethanol_SVM_Lin = clf.predict(X_test)
    encoder = LabelEncoder()


    encoder.fit(Y_train_Ethanol)   
    
    # Convert predicted labels back to original values
    y_predict_Ethanol_SVM_Lin = encoder.inverse_transform(y_predict_Ethanol_SVM_Lin)
    RMSE_Ethanol_SVM_Lin = np.sqrt(mean_squared_error(
        Y_test_Ethanol, y_predict_Ethanol_SVM_Lin)).astype(np.float32)
    MSE_Ethanol_SVM_Lin = mean_squared_error(
        Y_test_Ethanol, y_predict_Ethanol_SVM_Lin).astype(np.float32)
    MAE_Ethanol_SVM_Lin = mean_absolute_error(
        Y_test_Ethanol, y_predict_Ethanol_SVM_Lin).astype(np.float32)
    NRMSE_Ethanol_SVM_Lin = (
        RMSE_Ethanol_SVM_Lin / np.mean(y_predict_Ethanol_SVM_Lin)).astype(np.float32)
    print('RMSE_Ethanol =', RMSE_Ethanol_SVM_Lin, '\nMSE_Ethanol =', MSE_Ethanol_SVM_Lin,
          '\nMAE_Ethanol =', MAE_Ethanol_SVM_Lin, '\nNRMSE_Ethanol =', NRMSE_Ethanol_SVM_Lin)
    return RMSE_Ethanol_SVM_Lin, MSE_Ethanol_SVM_Lin, MAE_Ethanol_SVM_Lin, NRMSE_Ethanol_SVM_Lin